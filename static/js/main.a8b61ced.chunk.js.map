{"version":3,"sources":["renderers/rendererTypes.ts","Form.tsx","App.tsx","serviceWorker.js","theme.ts","index.tsx"],"names":["RendererTypes","useStyles","makeStyles","form","margin","padding","numberInput","maxWidth","WebkitAppearance","MozAppearance","FormControl","styled","NativeFormControl","textAlign","display","flexDirection","justifyContent","Form","generateType","setGenerateType","content","setContent","splitIndex","setsplitIndex","exportMethod","classes","Paper","elevation","className","FormLabel","component","TextField","value","onChange","event","target","Math","floor","length","label","Tooltip","title","TransitionComponent","Zoom","Input","type","inputMode","inputProps","style","min","max","onInput","Number","startAdornment","IconButton","disabled","onClick","ind","endAdornment","RadioGroup","aria-label","name","FormControlLabel","TYPE_SVG","control","Radio","TYPE_CANVAS","Fade","placement","color","SvgRenderer","lazy","CanvasRenderer","container","previewer","Centered","overflow","App","React","useState","setexportMethod","Box","Container","fallback","Boolean","window","location","hostname","match","createMuiTheme","palette","Object","defineProperty","String","prototype","get","len","i","this","charCodeAt","ReactDOM","render","StrictMode","ThemeProvider","theme","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a8b61ced.chunk.js","sourcesContent":["enum RendererTypes {\n  TYPE_CANVAS = \"TYPE_CANVAS\",\n  TYPE_SVG = \"TYPE_SVG\",\n}\n\nexport default RendererTypes;\n","import React from \"react\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport NativeFormControl from \"@material-ui/core/FormControl\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport {\n  TextField,\n  Paper,\n  makeStyles,\n  IconButton,\n  Input,\n  Button,\n} from \"@material-ui/core\";\nimport { styled } from \"@material-ui/core/styles\";\nimport RendererTypes from \"src/renderers/rendererTypes\";\nimport GetAppIcon from \"@material-ui/icons/GetApp\";\nimport ArrowBackIos from \"@material-ui/icons/ArrowBackIos\";\nimport ArrowForwardIos from \"@material-ui/icons/ArrowForwardIos\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport Fade from \"@material-ui/core/Fade\";\nimport Zoom from \"@material-ui/core/Zoom\";\ntype FormProps = {\n  content: string;\n  setContent: React.Dispatch<React.SetStateAction<string>>;\n  generateType: string;\n  setGenerateType: React.Dispatch<React.SetStateAction<string>>;\n  splitIndex: number;\n  setsplitIndex: React.Dispatch<React.SetStateAction<number>>;\n  exportMethod: () => void;\n};\n\nconst useStyles = makeStyles({\n  form: {\n    margin: \"20px\",\n    padding: \"20px\",\n  },\n  numberInput: {\n    maxWidth: \"150px\",\n    \"& .MuiInput-input::-webkit-inner-spin-button\": {\n      WebkitAppearance: \"none\",\n      margin: 0,\n    },\n    \"& .MuiInput-input[type=number]\": {\n      MozAppearance: \"textfield\",\n    },\n  },\n});\n\nconst FormControl = styled(NativeFormControl)({\n  textAlign: \"center\",\n  display: \"flex\",\n  flexDirection: \"column\",\n  padding: \"1em\",\n  justifyContent: \"center\",\n});\n\nexport default function Form({\n  generateType,\n  setGenerateType,\n  content,\n  setContent,\n  splitIndex,\n  setsplitIndex,\n  exportMethod,\n}: FormProps) {\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setGenerateType((event.target as HTMLInputElement).value);\n  };\n\n  const handleChangeContent = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setContent((event.target as HTMLInputElement).value);\n    setsplitIndex(\n      Math.floor((event.target as HTMLInputElement).value.length / 2)\n    );\n  };\n\n  const classes = useStyles();\n\n  return (\n    <Paper elevation={3} className={classes.form}>\n      <FormControl>\n        <FormLabel component=\"legend\">文字</FormLabel>\n        <TextField\n          value={content}\n          onChange={handleChangeContent}\n          label=\"请输入文字\"\n        />\n      </FormControl>\n      <FormControl>\n        <FormLabel component=\"legend\">分隔</FormLabel>\n        <Tooltip title=\"文字分隔点\" TransitionComponent={Zoom}>\n          <Input\n            className={classes.numberInput}\n            value={splitIndex}\n            type=\"number\"\n            inputMode=\"numeric\"\n            inputProps={{\n              style: {},\n              min: 0,\n              max: content.length,\n            }}\n            onInput={(event) =>\n              setsplitIndex(Number((event.target as HTMLInputElement).value))\n            }\n            startAdornment={\n              <IconButton\n                disabled={splitIndex <= 0}\n                onClick={() => {\n                  if (splitIndex - 1 >= 0) setsplitIndex((ind) => ind - 1);\n                }}\n              >\n                <ArrowBackIos></ArrowBackIos>\n              </IconButton>\n            }\n            endAdornment={\n              <IconButton\n                disabled={splitIndex >= content.length}\n                onClick={() => {\n                  if (splitIndex + 1 <= content.length)\n                    setsplitIndex((ind) => ind + 1);\n                }}\n              >\n                <ArrowForwardIos></ArrowForwardIos>\n              </IconButton>\n            }\n          />\n        </Tooltip>\n      </FormControl>\n\n      <FormControl>\n        <FormLabel component=\"legend\">类型</FormLabel>\n        <span>\n          <RadioGroup\n            aria-label=\"gender\"\n            name=\"gender1\"\n            value={generateType}\n            onChange={handleChange}\n          >\n            <FormControlLabel\n              value={RendererTypes.TYPE_SVG}\n              control={<Radio />}\n              label=\"SVG\"\n            />\n            <FormControlLabel\n              value={RendererTypes.TYPE_CANVAS}\n              control={<Radio />}\n              label=\"PNG\"\n            />\n          </RadioGroup>\n        </span>\n      </FormControl>\n      <FormControl>\n        <Tooltip title=\"下载\" TransitionComponent={Fade} placement=\"top\">\n          <span>\n            <IconButton\n              disabled={content.length === 0 || !generateType}\n              color=\"secondary\"\n              component=\"span\"\n              onClick={exportMethod}\n            >\n              <GetAppIcon></GetAppIcon>\n            </IconButton>\n          </span>\n        </Tooltip>\n      </FormControl>\n    </Paper>\n  );\n}\n","import React, { lazy, Suspense } from \"react\";\nimport Form from \"./Form\";\nimport { Box, Container, makeStyles } from \"@material-ui/core\";\nimport { styled } from \"@material-ui/styles\";\nimport RendererTypes from \"./renderers/rendererTypes\";\n\nconst SvgRenderer = lazy(() => import(\"src/renderers/SvgRenderer\"));\nconst CanvasRenderer = lazy(() => import(\"src/renderers/CanvasRenderer\"));\n\nconst useStyles = makeStyles({\n  container: {\n    maxWidth: \"500px\",\n  },\n\n  previewer: {\n    maxWidth: \"700px\",\n    margin: \"20px\",\n    padding: \"20px\",\n  },\n});\n\nconst Centered = styled(\"div\")({\n  overflow: \"auto\",\n  textAlign: \"center\",\n});\n\nfunction App() {\n  const [generateType, setGenerateType] = React.useState(\"\");\n  const [content, setContent] = React.useState(\"\");\n  const [splitIndex, setsplitIndex] = React.useState(0);\n  const [exportMethod, setexportMethod] = React.useState(() => () => {});\n\n  const classes = useStyles();\n  return (\n    <Box>\n      <Container className={classes.container}>\n        <Form\n          generateType={generateType}\n          setGenerateType={setGenerateType}\n          content={content}\n          splitIndex={splitIndex}\n          exportMethod={exportMethod}\n          setsplitIndex={setsplitIndex}\n          setContent={setContent}\n        ></Form>\n      </Container>\n      <Centered>\n        <Suspense fallback=\"loading\">\n          {generateType === RendererTypes.TYPE_SVG && (\n            <SvgRenderer\n              setexportMethod={setexportMethod}\n              content={content}\n              splitIndex={splitIndex}\n            ></SvgRenderer>\n          )}\n          {generateType === RendererTypes.TYPE_CANVAS && (\n            <CanvasRenderer\n              setexportMethod={setexportMethod}\n              content={content}\n              splitIndex={splitIndex}\n            ></CanvasRenderer>\n          )}\n        </Suspense>\n      </Centered>\n    </Box>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createMuiTheme } from \"@material-ui/core/styles\";\nexport default createMuiTheme({ palette: { type: \"dark\" } });\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport theme from \"./theme\";\n// eslint-disable-next-line no-extend-native\nObject.defineProperty(String.prototype, \"gblen\", {\n  get: function () {\n    let len = 0;\n    for (let i = 0; i < this.length; i++) {\n      if (this.charCodeAt(i) > 127 || this.charCodeAt(i) === 94) {\n        len += 2;\n      } else {\n        len++;\n      }\n    }\n\n    return len;\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}